{"remainingRequest":"/home/runner/work/U2_Logica_matematica/U2_Logica_matematica/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Logica_matematica/U2_Logica_matematica/src/views/curso/Tema2.vue?vue&type=template&id=0101e572&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Logica_matematica/U2_Logica_matematica/src/views/curso/Tema2.vue","mtime":1736113174986},{"path":"/home/runner/work/U2_Logica_matematica/U2_Logica_matematica/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Logica_matematica/U2_Logica_matematica/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Logica_matematica/U2_Logica_matematica/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Logica_matematica/U2_Logica_matematica/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Logica_matematica/U2_Logica_matematica/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}